version: '3.4'

name: apigw

services:
  keycloak:
    profiles: [ "apisix-decoupled", "apisix-standalone", "kong-decoupled", "kong-standalone" ]
    platform: linux/x86_64
    build: 
      context: services/keycloak
    command:
      - start-dev
      - --http-port=2380
      - --http-relative-path=/auth
      - --import-realm
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "2380:2380"
    networks:
      - ax

  ################################################################

  apisix-gateway:
    profiles: [ "apisix-standalone" ]
    platform: linux/x86_64
    build:
      context: services/apisix-gateway
    ports:
      - 9081:9080
    depends_on:
      grafana-loki:
        condition: service_healthy
    networks:
      - ax

  apisix-db:
    profiles: [ "apisix-decoupled" ]
    image: bitnami/etcd:3.5.7
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://apisix-db:2379
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 5s
      timeout: 10s
      retries: 6
    networks:
      - ax

  apisix-gateway-decoupled:
    profiles: [ "apisix-decoupled" ]
    platform: linux/x86_64
    build:
      context: services/gateway
    environment:
      - APISIX_DEPLOYMENT_ETCD_HOST=["http://apisix-db:2379"]
    ports:
      - 9080:9080
    depends_on:
      apisix-db:
        condition: service_healthy
      grafana-loki:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "cat", "/home/apisix/routes-loaded"]
      interval: 30s
      timeout: 10s
      retries: 30
    networks:
      - ax

  apisix-dashboard:
    profiles: [ "apisix-decoupled" ]
    platform: linux/x86_64
    build:
      context: services/gateway-dashboard
    environment:
      - APISIX_DEPLOYMENT_ETCD_HOST=["http://apisix-db:2379"]
    ports:
      - 9000:9000
    depends_on:
      apisix-db:
        condition: service_healthy
    networks:
      - ax

  apisix-etl:
    profiles: [ "apisix-decoupled", "apisix-standalone" ]
    build:
      context: services/apisix-etl
    networks:
      - ax

  ################################################################

  httpgobin:
    profiles: [ "apisix-decoupled", "apisix-standalone", "kong-decoupled", "kong-standalone" ]
    build:
      context: services/microservice
    ports:
      - 3380:8080
    networks:
      - ax

  ################################################################

  grafana:
    profiles: [ "apisix-decoupled", "apisix-standalone", "kong-decoupled", "kong-standalone" ]
    build: 
      context: services/grafana
    ports:
      - 3000:3000
    depends_on:
      grafana-loki:
        condition: service_healthy
    networks:
      - ax

  grafana-loki:
    profiles: [ "apisix-decoupled", "apisix-standalone", "kong-decoupled", "kong-standalone" ]
    build: 
      context: services/grafana-loki
    ports:
      - 3100:3100
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://grafana-loki:3100/ready"]
      interval: 5s
      timeout: 10s
      retries: 6
    networks:
      - ax

  prometheus:
    profiles: [ "apisix-decoupled", "apisix-standalone", "kong-decoupled", "kong-standalone" ]
    build:
      context: services/prometheus
    networks:
      - ax

  ################################################################

  kong-db:
    image: postgres:9.5
    profiles: [ "kong-decoupled" ]
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test:
        ["CMD", "pg_isready", "-d", "kong", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - ax

  kong-migrations:
    profiles: [ "kong-decoupled" ]
    build:
      context: services/kong-gateway
    command: kong migrations bootstrap
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - ax
    restart: on-failure

  kong-migrations-up:
    profiles: [ "kong-decoupled" ]
    build:
      context: services/kong-gateway
    command: kong migrations up && kong migrations finish
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - ax
    restart: on-failure

  kong-gateway-decoupled:
    profiles: [ "kong-decoupled" ]
    build:
      context: services/kong-gateway
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "0.0.0.0:8100"
      KONG_ADMIN_LISTEN: "0.0.0.0:8101"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8102"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      DECK_KONG_ADDR: http://localhost:8101
    ports:
      - 8100:8100
      - 8101:8101
      - 8102:8102
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - ax

  kong-gateway:
    profiles: [ "kong-standalone" ]
    build:
      context: services/kong-gateway
    environment:
      KONG_DATABASE: off
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    ports:
      - 8000:8000
      - 8001:8001
      - 8002:8002
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - ax

  kong-etl:
    profiles: [ "kong-decoupled", "kong-standalone" ]
    build:
      context: services/kong-etl
    networks:
      - ax

networks:
  ax:
    driver: bridge